Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> inicio
Rule 1     inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PARDER PTCOMA declarations codeList
Rule 2     inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PTCOMA CADENA PARDER PTCOMA declarations codeList
Rule 3     declarations -> declarations declaration
Rule 4     declarations -> declaration
Rule 5     declaration -> VAR idList CORIZQ ENTERO CORDER FLOAT64 PTCOMA
Rule 6     declaration -> VAR idList type PTCOMA
Rule 7     type -> INT
Rule 8     type -> FLOAT64
Rule 9     idList -> idList COMMA ID
Rule 10    idList -> ID
Rule 11    codeList -> codeList code
Rule 12    codeList -> code
Rule 13    code -> FUNC ID PARIZQ PARDER statement
Rule 14    statement -> LLAVEIZQ instructions LLAVEDER
Rule 15    instructions -> instructions instruction
Rule 16    instructions -> instruction
Rule 17    instruction -> assign opcion_ptcoma
Rule 18    instruction -> print opcion_ptcoma
Rule 19    instruction -> if
Rule 20    instruction -> gotoSt opcion_ptcoma
Rule 21    instruction -> label
Rule 22    instruction -> callFunc opcion_ptcoma
Rule 23    instruction -> retSt opcion_ptcoma
Rule 24    opcion_ptcoma -> PTCOMA
Rule 25    opcion_ptcoma -> <empty>
Rule 26    retSt -> RETURN
Rule 27    callFunc -> ID PARIZQ PARDER
Rule 28    label -> ID DP
Rule 29    gotoSt -> GOTO ID
Rule 30    if -> IF expression LLAVEIZQ GOTO ID PTCOMA LLAVEDER
Rule 31    assign -> access IGUAL finalExp
Rule 32    assign -> ID IGUAL expression
Rule 33    assign -> ID IGUAL modul
Rule 34    assign -> ID IGUAL access
Rule 35    modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ENTERO PARDER
Rule 36    modul -> MATH PUNTO MOD PARIZQ ID COMMA ID PARDER
Rule 37    modul -> MATH PUNTO MOD PARIZQ ID COMMA ENTERO PARDER
Rule 38    modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ID PARDER
Rule 39    print -> FMT PUNTO PRINTF PARIZQ CADENA COMMA printValue PARDER
Rule 40    printValue -> INT PARIZQ finalExp PARDER
Rule 41    printValue -> finalExp
Rule 42    expression -> finalExp MAS finalExp
Rule 43    expression -> finalExp MENOS finalExp
Rule 44    expression -> finalExp MUL finalExp
Rule 45    expression -> finalExp DIV finalExp
Rule 46    expression -> finalExp MAYOR finalExp
Rule 47    expression -> finalExp MENOR finalExp
Rule 48    expression -> finalExp MAYORIGUAL finalExp
Rule 49    expression -> finalExp MENORIGUAL finalExp
Rule 50    expression -> finalExp IGUALIGUAL finalExp
Rule 51    expression -> finalExp DIFERENTE finalExp
Rule 52    expression -> finalExp
Rule 53    finalExp -> ID
Rule 54    finalExp -> ENTERO
Rule 55    finalExp -> MENOS ENTERO
Rule 56    finalExp -> DECIMAL
Rule 57    access -> ID CORIZQ INT PARIZQ finalExp PARDER CORDER
Rule 58    access -> ID CORIZQ finalExp CORDER

Terminals, with rules where they appear

CADENA               : 1 2 2 39
COMMA                : 9 35 36 37 38 39
CORDER               : 5 57 58
CORIZQ               : 5 57 58
DECIMAL              : 56
DIFERENTE            : 51
DIV                  : 45
DP                   : 28
ENTERO               : 5 35 35 37 38 54 55
FLOAT64              : 5 8
FMT                  : 39
FUNC                 : 13
GOTO                 : 29 30
ID                   : 1 2 9 10 13 27 28 29 30 32 33 34 36 36 37 38 53 57 58
IF                   : 30
IGUAL                : 31 32 33 34
IGUALIGUAL           : 50
IMPORT               : 1 2
INT                  : 7 40 57
LLAVEDER             : 14 30
LLAVEIZQ             : 14 30
MAS                  : 42
MATH                 : 35 36 37 38
MAYOR                : 46
MAYORIGUAL           : 48
MENOR                : 47
MENORIGUAL           : 49
MENOS                : 43 55
MOD                  : 35 36 37 38
MUL                  : 44
PACKAGE              : 1 2
PARDER               : 1 2 13 27 35 36 37 38 39 40 57
PARIZQ               : 1 2 13 27 35 36 37 38 39 40 57
PRINTF               : 39
PTCOMA               : 1 1 2 2 2 5 6 24 30
PUNTO                : 35 36 37 38 39
RETURN               : 26
VAR                  : 5 6
error                : 

Nonterminals, with rules where they appear

access               : 31 34
assign               : 17
callFunc             : 22
code                 : 11 12
codeList             : 1 2 11
declaration          : 3 4
declarations         : 1 2 3
expression           : 30 32
finalExp             : 31 40 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 57 58
gotoSt               : 20
idList               : 5 6 9
if                   : 19
inicio               : 0
instruction          : 15 16
instructions         : 14 15
label                : 21
modul                : 33
opcion_ptcoma        : 17 18 20 22 23
print                : 18
printValue           : 39
retSt                : 23
statement            : 13
type                 : 6

Parsing method: LALR

state 0

    (0) S' -> . inicio
    (1) inicio -> . PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PARDER PTCOMA declarations codeList
    (2) inicio -> . PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PTCOMA CADENA PARDER PTCOMA declarations codeList

    PACKAGE         shift and go to state 2

    inicio                         shift and go to state 1

state 1

    (0) S' -> inicio .



state 2

    (1) inicio -> PACKAGE . ID PTCOMA IMPORT PARIZQ CADENA PARDER PTCOMA declarations codeList
    (2) inicio -> PACKAGE . ID PTCOMA IMPORT PARIZQ CADENA PTCOMA CADENA PARDER PTCOMA declarations codeList

    ID              shift and go to state 3


state 3

    (1) inicio -> PACKAGE ID . PTCOMA IMPORT PARIZQ CADENA PARDER PTCOMA declarations codeList
    (2) inicio -> PACKAGE ID . PTCOMA IMPORT PARIZQ CADENA PTCOMA CADENA PARDER PTCOMA declarations codeList

    PTCOMA          shift and go to state 4


state 4

    (1) inicio -> PACKAGE ID PTCOMA . IMPORT PARIZQ CADENA PARDER PTCOMA declarations codeList
    (2) inicio -> PACKAGE ID PTCOMA . IMPORT PARIZQ CADENA PTCOMA CADENA PARDER PTCOMA declarations codeList

    IMPORT          shift and go to state 5


state 5

    (1) inicio -> PACKAGE ID PTCOMA IMPORT . PARIZQ CADENA PARDER PTCOMA declarations codeList
    (2) inicio -> PACKAGE ID PTCOMA IMPORT . PARIZQ CADENA PTCOMA CADENA PARDER PTCOMA declarations codeList

    PARIZQ          shift and go to state 6


state 6

    (1) inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ . CADENA PARDER PTCOMA declarations codeList
    (2) inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ . CADENA PTCOMA CADENA PARDER PTCOMA declarations codeList

    CADENA          shift and go to state 7


state 7

    (1) inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA . PARDER PTCOMA declarations codeList
    (2) inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA . PTCOMA CADENA PARDER PTCOMA declarations codeList

    PARDER          shift and go to state 9
    PTCOMA          shift and go to state 8


state 8

    (2) inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PTCOMA . CADENA PARDER PTCOMA declarations codeList

    CADENA          shift and go to state 10


state 9

    (1) inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PARDER . PTCOMA declarations codeList

    PTCOMA          shift and go to state 11


state 10

    (2) inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PTCOMA CADENA . PARDER PTCOMA declarations codeList

    PARDER          shift and go to state 12


state 11

    (1) inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PARDER PTCOMA . declarations codeList
    (3) declarations -> . declarations declaration
    (4) declarations -> . declaration
    (5) declaration -> . VAR idList CORIZQ ENTERO CORDER FLOAT64 PTCOMA
    (6) declaration -> . VAR idList type PTCOMA

    VAR             shift and go to state 15

    declarations                   shift and go to state 13
    declaration                    shift and go to state 14

state 12

    (2) inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PTCOMA CADENA PARDER . PTCOMA declarations codeList

    PTCOMA          shift and go to state 16


state 13

    (1) inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PARDER PTCOMA declarations . codeList
    (3) declarations -> declarations . declaration
    (11) codeList -> . codeList code
    (12) codeList -> . code
    (5) declaration -> . VAR idList CORIZQ ENTERO CORDER FLOAT64 PTCOMA
    (6) declaration -> . VAR idList type PTCOMA
    (13) code -> . FUNC ID PARIZQ PARDER statement

    VAR             shift and go to state 15
    FUNC            shift and go to state 20

    codeList                       shift and go to state 17
    declaration                    shift and go to state 18
    code                           shift and go to state 19

state 14

    (4) declarations -> declaration .

    VAR             reduce using rule 4 (declarations -> declaration .)
    FUNC            reduce using rule 4 (declarations -> declaration .)


state 15

    (5) declaration -> VAR . idList CORIZQ ENTERO CORDER FLOAT64 PTCOMA
    (6) declaration -> VAR . idList type PTCOMA
    (9) idList -> . idList COMMA ID
    (10) idList -> . ID

    ID              shift and go to state 22

    idList                         shift and go to state 21

state 16

    (2) inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PTCOMA CADENA PARDER PTCOMA . declarations codeList
    (3) declarations -> . declarations declaration
    (4) declarations -> . declaration
    (5) declaration -> . VAR idList CORIZQ ENTERO CORDER FLOAT64 PTCOMA
    (6) declaration -> . VAR idList type PTCOMA

    VAR             shift and go to state 15

    declarations                   shift and go to state 23
    declaration                    shift and go to state 14

state 17

    (1) inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PARDER PTCOMA declarations codeList .
    (11) codeList -> codeList . code
    (13) code -> . FUNC ID PARIZQ PARDER statement

    $end            reduce using rule 1 (inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PARDER PTCOMA declarations codeList .)
    FUNC            shift and go to state 20

    code                           shift and go to state 24

state 18

    (3) declarations -> declarations declaration .

    VAR             reduce using rule 3 (declarations -> declarations declaration .)
    FUNC            reduce using rule 3 (declarations -> declarations declaration .)


state 19

    (12) codeList -> code .

    FUNC            reduce using rule 12 (codeList -> code .)
    $end            reduce using rule 12 (codeList -> code .)


state 20

    (13) code -> FUNC . ID PARIZQ PARDER statement

    ID              shift and go to state 25


state 21

    (5) declaration -> VAR idList . CORIZQ ENTERO CORDER FLOAT64 PTCOMA
    (6) declaration -> VAR idList . type PTCOMA
    (9) idList -> idList . COMMA ID
    (7) type -> . INT
    (8) type -> . FLOAT64

    CORIZQ          shift and go to state 26
    COMMA           shift and go to state 29
    INT             shift and go to state 30
    FLOAT64         shift and go to state 27

    type                           shift and go to state 28

state 22

    (10) idList -> ID .

    CORIZQ          reduce using rule 10 (idList -> ID .)
    COMMA           reduce using rule 10 (idList -> ID .)
    INT             reduce using rule 10 (idList -> ID .)
    FLOAT64         reduce using rule 10 (idList -> ID .)


state 23

    (2) inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PTCOMA CADENA PARDER PTCOMA declarations . codeList
    (3) declarations -> declarations . declaration
    (11) codeList -> . codeList code
    (12) codeList -> . code
    (5) declaration -> . VAR idList CORIZQ ENTERO CORDER FLOAT64 PTCOMA
    (6) declaration -> . VAR idList type PTCOMA
    (13) code -> . FUNC ID PARIZQ PARDER statement

    VAR             shift and go to state 15
    FUNC            shift and go to state 20

    codeList                       shift and go to state 31
    declaration                    shift and go to state 18
    code                           shift and go to state 19

state 24

    (11) codeList -> codeList code .

    FUNC            reduce using rule 11 (codeList -> codeList code .)
    $end            reduce using rule 11 (codeList -> codeList code .)


state 25

    (13) code -> FUNC ID . PARIZQ PARDER statement

    PARIZQ          shift and go to state 32


state 26

    (5) declaration -> VAR idList CORIZQ . ENTERO CORDER FLOAT64 PTCOMA

    ENTERO          shift and go to state 33


state 27

    (8) type -> FLOAT64 .

    PTCOMA          reduce using rule 8 (type -> FLOAT64 .)


state 28

    (6) declaration -> VAR idList type . PTCOMA

    PTCOMA          shift and go to state 34


state 29

    (9) idList -> idList COMMA . ID

    ID              shift and go to state 35


state 30

    (7) type -> INT .

    PTCOMA          reduce using rule 7 (type -> INT .)


state 31

    (2) inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PTCOMA CADENA PARDER PTCOMA declarations codeList .
    (11) codeList -> codeList . code
    (13) code -> . FUNC ID PARIZQ PARDER statement

    $end            reduce using rule 2 (inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PTCOMA CADENA PARDER PTCOMA declarations codeList .)
    FUNC            shift and go to state 20

    code                           shift and go to state 24

state 32

    (13) code -> FUNC ID PARIZQ . PARDER statement

    PARDER          shift and go to state 36


state 33

    (5) declaration -> VAR idList CORIZQ ENTERO . CORDER FLOAT64 PTCOMA

    CORDER          shift and go to state 37


state 34

    (6) declaration -> VAR idList type PTCOMA .

    VAR             reduce using rule 6 (declaration -> VAR idList type PTCOMA .)
    FUNC            reduce using rule 6 (declaration -> VAR idList type PTCOMA .)


state 35

    (9) idList -> idList COMMA ID .

    CORIZQ          reduce using rule 9 (idList -> idList COMMA ID .)
    COMMA           reduce using rule 9 (idList -> idList COMMA ID .)
    INT             reduce using rule 9 (idList -> idList COMMA ID .)
    FLOAT64         reduce using rule 9 (idList -> idList COMMA ID .)


state 36

    (13) code -> FUNC ID PARIZQ PARDER . statement
    (14) statement -> . LLAVEIZQ instructions LLAVEDER

    LLAVEIZQ        shift and go to state 39

    statement                      shift and go to state 38

state 37

    (5) declaration -> VAR idList CORIZQ ENTERO CORDER . FLOAT64 PTCOMA

    FLOAT64         shift and go to state 40


state 38

    (13) code -> FUNC ID PARIZQ PARDER statement .

    FUNC            reduce using rule 13 (code -> FUNC ID PARIZQ PARDER statement .)
    $end            reduce using rule 13 (code -> FUNC ID PARIZQ PARDER statement .)


state 39

    (14) statement -> LLAVEIZQ . instructions LLAVEDER
    (15) instructions -> . instructions instruction
    (16) instructions -> . instruction
    (17) instruction -> . assign opcion_ptcoma
    (18) instruction -> . print opcion_ptcoma
    (19) instruction -> . if
    (20) instruction -> . gotoSt opcion_ptcoma
    (21) instruction -> . label
    (22) instruction -> . callFunc opcion_ptcoma
    (23) instruction -> . retSt opcion_ptcoma
    (31) assign -> . access IGUAL finalExp
    (32) assign -> . ID IGUAL expression
    (33) assign -> . ID IGUAL modul
    (34) assign -> . ID IGUAL access
    (39) print -> . FMT PUNTO PRINTF PARIZQ CADENA COMMA printValue PARDER
    (30) if -> . IF expression LLAVEIZQ GOTO ID PTCOMA LLAVEDER
    (29) gotoSt -> . GOTO ID
    (28) label -> . ID DP
    (27) callFunc -> . ID PARIZQ PARDER
    (26) retSt -> . RETURN
    (57) access -> . ID CORIZQ INT PARIZQ finalExp PARDER CORDER
    (58) access -> . ID CORIZQ finalExp CORDER

    ID              shift and go to state 51
    FMT             shift and go to state 52
    IF              shift and go to state 53
    GOTO            shift and go to state 54
    RETURN          shift and go to state 55

    instructions                   shift and go to state 41
    instruction                    shift and go to state 42
    assign                         shift and go to state 43
    print                          shift and go to state 44
    if                             shift and go to state 45
    gotoSt                         shift and go to state 46
    label                          shift and go to state 47
    callFunc                       shift and go to state 48
    retSt                          shift and go to state 49
    access                         shift and go to state 50

state 40

    (5) declaration -> VAR idList CORIZQ ENTERO CORDER FLOAT64 . PTCOMA

    PTCOMA          shift and go to state 56


state 41

    (14) statement -> LLAVEIZQ instructions . LLAVEDER
    (15) instructions -> instructions . instruction
    (17) instruction -> . assign opcion_ptcoma
    (18) instruction -> . print opcion_ptcoma
    (19) instruction -> . if
    (20) instruction -> . gotoSt opcion_ptcoma
    (21) instruction -> . label
    (22) instruction -> . callFunc opcion_ptcoma
    (23) instruction -> . retSt opcion_ptcoma
    (31) assign -> . access IGUAL finalExp
    (32) assign -> . ID IGUAL expression
    (33) assign -> . ID IGUAL modul
    (34) assign -> . ID IGUAL access
    (39) print -> . FMT PUNTO PRINTF PARIZQ CADENA COMMA printValue PARDER
    (30) if -> . IF expression LLAVEIZQ GOTO ID PTCOMA LLAVEDER
    (29) gotoSt -> . GOTO ID
    (28) label -> . ID DP
    (27) callFunc -> . ID PARIZQ PARDER
    (26) retSt -> . RETURN
    (57) access -> . ID CORIZQ INT PARIZQ finalExp PARDER CORDER
    (58) access -> . ID CORIZQ finalExp CORDER

    LLAVEDER        shift and go to state 57
    ID              shift and go to state 51
    FMT             shift and go to state 52
    IF              shift and go to state 53
    GOTO            shift and go to state 54
    RETURN          shift and go to state 55

    instruction                    shift and go to state 58
    assign                         shift and go to state 43
    print                          shift and go to state 44
    if                             shift and go to state 45
    gotoSt                         shift and go to state 46
    label                          shift and go to state 47
    callFunc                       shift and go to state 48
    retSt                          shift and go to state 49
    access                         shift and go to state 50

state 42

    (16) instructions -> instruction .

    LLAVEDER        reduce using rule 16 (instructions -> instruction .)
    ID              reduce using rule 16 (instructions -> instruction .)
    FMT             reduce using rule 16 (instructions -> instruction .)
    IF              reduce using rule 16 (instructions -> instruction .)
    GOTO            reduce using rule 16 (instructions -> instruction .)
    RETURN          reduce using rule 16 (instructions -> instruction .)


state 43

    (17) instruction -> assign . opcion_ptcoma
    (24) opcion_ptcoma -> . PTCOMA
    (25) opcion_ptcoma -> .

    PTCOMA          shift and go to state 60
    LLAVEDER        reduce using rule 25 (opcion_ptcoma -> .)
    ID              reduce using rule 25 (opcion_ptcoma -> .)
    FMT             reduce using rule 25 (opcion_ptcoma -> .)
    IF              reduce using rule 25 (opcion_ptcoma -> .)
    GOTO            reduce using rule 25 (opcion_ptcoma -> .)
    RETURN          reduce using rule 25 (opcion_ptcoma -> .)

    opcion_ptcoma                  shift and go to state 59

state 44

    (18) instruction -> print . opcion_ptcoma
    (24) opcion_ptcoma -> . PTCOMA
    (25) opcion_ptcoma -> .

    PTCOMA          shift and go to state 60
    LLAVEDER        reduce using rule 25 (opcion_ptcoma -> .)
    ID              reduce using rule 25 (opcion_ptcoma -> .)
    FMT             reduce using rule 25 (opcion_ptcoma -> .)
    IF              reduce using rule 25 (opcion_ptcoma -> .)
    GOTO            reduce using rule 25 (opcion_ptcoma -> .)
    RETURN          reduce using rule 25 (opcion_ptcoma -> .)

    opcion_ptcoma                  shift and go to state 61

state 45

    (19) instruction -> if .

    LLAVEDER        reduce using rule 19 (instruction -> if .)
    ID              reduce using rule 19 (instruction -> if .)
    FMT             reduce using rule 19 (instruction -> if .)
    IF              reduce using rule 19 (instruction -> if .)
    GOTO            reduce using rule 19 (instruction -> if .)
    RETURN          reduce using rule 19 (instruction -> if .)


state 46

    (20) instruction -> gotoSt . opcion_ptcoma
    (24) opcion_ptcoma -> . PTCOMA
    (25) opcion_ptcoma -> .

    PTCOMA          shift and go to state 60
    LLAVEDER        reduce using rule 25 (opcion_ptcoma -> .)
    ID              reduce using rule 25 (opcion_ptcoma -> .)
    FMT             reduce using rule 25 (opcion_ptcoma -> .)
    IF              reduce using rule 25 (opcion_ptcoma -> .)
    GOTO            reduce using rule 25 (opcion_ptcoma -> .)
    RETURN          reduce using rule 25 (opcion_ptcoma -> .)

    opcion_ptcoma                  shift and go to state 62

state 47

    (21) instruction -> label .

    LLAVEDER        reduce using rule 21 (instruction -> label .)
    ID              reduce using rule 21 (instruction -> label .)
    FMT             reduce using rule 21 (instruction -> label .)
    IF              reduce using rule 21 (instruction -> label .)
    GOTO            reduce using rule 21 (instruction -> label .)
    RETURN          reduce using rule 21 (instruction -> label .)


state 48

    (22) instruction -> callFunc . opcion_ptcoma
    (24) opcion_ptcoma -> . PTCOMA
    (25) opcion_ptcoma -> .

    PTCOMA          shift and go to state 60
    LLAVEDER        reduce using rule 25 (opcion_ptcoma -> .)
    ID              reduce using rule 25 (opcion_ptcoma -> .)
    FMT             reduce using rule 25 (opcion_ptcoma -> .)
    IF              reduce using rule 25 (opcion_ptcoma -> .)
    GOTO            reduce using rule 25 (opcion_ptcoma -> .)
    RETURN          reduce using rule 25 (opcion_ptcoma -> .)

    opcion_ptcoma                  shift and go to state 63

state 49

    (23) instruction -> retSt . opcion_ptcoma
    (24) opcion_ptcoma -> . PTCOMA
    (25) opcion_ptcoma -> .

    PTCOMA          shift and go to state 60
    LLAVEDER        reduce using rule 25 (opcion_ptcoma -> .)
    ID              reduce using rule 25 (opcion_ptcoma -> .)
    FMT             reduce using rule 25 (opcion_ptcoma -> .)
    IF              reduce using rule 25 (opcion_ptcoma -> .)
    GOTO            reduce using rule 25 (opcion_ptcoma -> .)
    RETURN          reduce using rule 25 (opcion_ptcoma -> .)

    opcion_ptcoma                  shift and go to state 64

state 50

    (31) assign -> access . IGUAL finalExp

    IGUAL           shift and go to state 65


state 51

    (32) assign -> ID . IGUAL expression
    (33) assign -> ID . IGUAL modul
    (34) assign -> ID . IGUAL access
    (28) label -> ID . DP
    (27) callFunc -> ID . PARIZQ PARDER
    (57) access -> ID . CORIZQ INT PARIZQ finalExp PARDER CORDER
    (58) access -> ID . CORIZQ finalExp CORDER

    IGUAL           shift and go to state 66
    DP              shift and go to state 67
    PARIZQ          shift and go to state 68
    CORIZQ          shift and go to state 69


state 52

    (39) print -> FMT . PUNTO PRINTF PARIZQ CADENA COMMA printValue PARDER

    PUNTO           shift and go to state 70


state 53

    (30) if -> IF . expression LLAVEIZQ GOTO ID PTCOMA LLAVEDER
    (42) expression -> . finalExp MAS finalExp
    (43) expression -> . finalExp MENOS finalExp
    (44) expression -> . finalExp MUL finalExp
    (45) expression -> . finalExp DIV finalExp
    (46) expression -> . finalExp MAYOR finalExp
    (47) expression -> . finalExp MENOR finalExp
    (48) expression -> . finalExp MAYORIGUAL finalExp
    (49) expression -> . finalExp MENORIGUAL finalExp
    (50) expression -> . finalExp IGUALIGUAL finalExp
    (51) expression -> . finalExp DIFERENTE finalExp
    (52) expression -> . finalExp
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    expression                     shift and go to state 71
    finalExp                       shift and go to state 73

state 54

    (29) gotoSt -> GOTO . ID

    ID              shift and go to state 77


state 55

    (26) retSt -> RETURN .

    PTCOMA          reduce using rule 26 (retSt -> RETURN .)
    LLAVEDER        reduce using rule 26 (retSt -> RETURN .)
    ID              reduce using rule 26 (retSt -> RETURN .)
    FMT             reduce using rule 26 (retSt -> RETURN .)
    IF              reduce using rule 26 (retSt -> RETURN .)
    GOTO            reduce using rule 26 (retSt -> RETURN .)
    RETURN          reduce using rule 26 (retSt -> RETURN .)


state 56

    (5) declaration -> VAR idList CORIZQ ENTERO CORDER FLOAT64 PTCOMA .

    VAR             reduce using rule 5 (declaration -> VAR idList CORIZQ ENTERO CORDER FLOAT64 PTCOMA .)
    FUNC            reduce using rule 5 (declaration -> VAR idList CORIZQ ENTERO CORDER FLOAT64 PTCOMA .)


state 57

    (14) statement -> LLAVEIZQ instructions LLAVEDER .

    FUNC            reduce using rule 14 (statement -> LLAVEIZQ instructions LLAVEDER .)
    $end            reduce using rule 14 (statement -> LLAVEIZQ instructions LLAVEDER .)


state 58

    (15) instructions -> instructions instruction .

    LLAVEDER        reduce using rule 15 (instructions -> instructions instruction .)
    ID              reduce using rule 15 (instructions -> instructions instruction .)
    FMT             reduce using rule 15 (instructions -> instructions instruction .)
    IF              reduce using rule 15 (instructions -> instructions instruction .)
    GOTO            reduce using rule 15 (instructions -> instructions instruction .)
    RETURN          reduce using rule 15 (instructions -> instructions instruction .)


state 59

    (17) instruction -> assign opcion_ptcoma .

    LLAVEDER        reduce using rule 17 (instruction -> assign opcion_ptcoma .)
    ID              reduce using rule 17 (instruction -> assign opcion_ptcoma .)
    FMT             reduce using rule 17 (instruction -> assign opcion_ptcoma .)
    IF              reduce using rule 17 (instruction -> assign opcion_ptcoma .)
    GOTO            reduce using rule 17 (instruction -> assign opcion_ptcoma .)
    RETURN          reduce using rule 17 (instruction -> assign opcion_ptcoma .)


state 60

    (24) opcion_ptcoma -> PTCOMA .

    LLAVEDER        reduce using rule 24 (opcion_ptcoma -> PTCOMA .)
    ID              reduce using rule 24 (opcion_ptcoma -> PTCOMA .)
    FMT             reduce using rule 24 (opcion_ptcoma -> PTCOMA .)
    IF              reduce using rule 24 (opcion_ptcoma -> PTCOMA .)
    GOTO            reduce using rule 24 (opcion_ptcoma -> PTCOMA .)
    RETURN          reduce using rule 24 (opcion_ptcoma -> PTCOMA .)


state 61

    (18) instruction -> print opcion_ptcoma .

    LLAVEDER        reduce using rule 18 (instruction -> print opcion_ptcoma .)
    ID              reduce using rule 18 (instruction -> print opcion_ptcoma .)
    FMT             reduce using rule 18 (instruction -> print opcion_ptcoma .)
    IF              reduce using rule 18 (instruction -> print opcion_ptcoma .)
    GOTO            reduce using rule 18 (instruction -> print opcion_ptcoma .)
    RETURN          reduce using rule 18 (instruction -> print opcion_ptcoma .)


state 62

    (20) instruction -> gotoSt opcion_ptcoma .

    LLAVEDER        reduce using rule 20 (instruction -> gotoSt opcion_ptcoma .)
    ID              reduce using rule 20 (instruction -> gotoSt opcion_ptcoma .)
    FMT             reduce using rule 20 (instruction -> gotoSt opcion_ptcoma .)
    IF              reduce using rule 20 (instruction -> gotoSt opcion_ptcoma .)
    GOTO            reduce using rule 20 (instruction -> gotoSt opcion_ptcoma .)
    RETURN          reduce using rule 20 (instruction -> gotoSt opcion_ptcoma .)


state 63

    (22) instruction -> callFunc opcion_ptcoma .

    LLAVEDER        reduce using rule 22 (instruction -> callFunc opcion_ptcoma .)
    ID              reduce using rule 22 (instruction -> callFunc opcion_ptcoma .)
    FMT             reduce using rule 22 (instruction -> callFunc opcion_ptcoma .)
    IF              reduce using rule 22 (instruction -> callFunc opcion_ptcoma .)
    GOTO            reduce using rule 22 (instruction -> callFunc opcion_ptcoma .)
    RETURN          reduce using rule 22 (instruction -> callFunc opcion_ptcoma .)


state 64

    (23) instruction -> retSt opcion_ptcoma .

    LLAVEDER        reduce using rule 23 (instruction -> retSt opcion_ptcoma .)
    ID              reduce using rule 23 (instruction -> retSt opcion_ptcoma .)
    FMT             reduce using rule 23 (instruction -> retSt opcion_ptcoma .)
    IF              reduce using rule 23 (instruction -> retSt opcion_ptcoma .)
    GOTO            reduce using rule 23 (instruction -> retSt opcion_ptcoma .)
    RETURN          reduce using rule 23 (instruction -> retSt opcion_ptcoma .)


state 65

    (31) assign -> access IGUAL . finalExp
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    finalExp                       shift and go to state 78

state 66

    (32) assign -> ID IGUAL . expression
    (33) assign -> ID IGUAL . modul
    (34) assign -> ID IGUAL . access
    (42) expression -> . finalExp MAS finalExp
    (43) expression -> . finalExp MENOS finalExp
    (44) expression -> . finalExp MUL finalExp
    (45) expression -> . finalExp DIV finalExp
    (46) expression -> . finalExp MAYOR finalExp
    (47) expression -> . finalExp MENOR finalExp
    (48) expression -> . finalExp MAYORIGUAL finalExp
    (49) expression -> . finalExp MENORIGUAL finalExp
    (50) expression -> . finalExp IGUALIGUAL finalExp
    (51) expression -> . finalExp DIFERENTE finalExp
    (52) expression -> . finalExp
    (35) modul -> . MATH PUNTO MOD PARIZQ ENTERO COMMA ENTERO PARDER
    (36) modul -> . MATH PUNTO MOD PARIZQ ID COMMA ID PARDER
    (37) modul -> . MATH PUNTO MOD PARIZQ ID COMMA ENTERO PARDER
    (38) modul -> . MATH PUNTO MOD PARIZQ ENTERO COMMA ID PARDER
    (57) access -> . ID CORIZQ INT PARIZQ finalExp PARDER CORDER
    (58) access -> . ID CORIZQ finalExp CORDER
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    MATH            shift and go to state 83
    ID              shift and go to state 79
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    expression                     shift and go to state 80
    modul                          shift and go to state 81
    access                         shift and go to state 82
    finalExp                       shift and go to state 73

state 67

    (28) label -> ID DP .

    LLAVEDER        reduce using rule 28 (label -> ID DP .)
    ID              reduce using rule 28 (label -> ID DP .)
    FMT             reduce using rule 28 (label -> ID DP .)
    IF              reduce using rule 28 (label -> ID DP .)
    GOTO            reduce using rule 28 (label -> ID DP .)
    RETURN          reduce using rule 28 (label -> ID DP .)


state 68

    (27) callFunc -> ID PARIZQ . PARDER

    PARDER          shift and go to state 84


state 69

    (57) access -> ID CORIZQ . INT PARIZQ finalExp PARDER CORDER
    (58) access -> ID CORIZQ . finalExp CORDER
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    INT             shift and go to state 85
    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    finalExp                       shift and go to state 86

state 70

    (39) print -> FMT PUNTO . PRINTF PARIZQ CADENA COMMA printValue PARDER

    PRINTF          shift and go to state 87


state 71

    (30) if -> IF expression . LLAVEIZQ GOTO ID PTCOMA LLAVEDER

    LLAVEIZQ        shift and go to state 88


state 72

    (53) finalExp -> ID .

    MAS             reduce using rule 53 (finalExp -> ID .)
    MENOS           reduce using rule 53 (finalExp -> ID .)
    MUL             reduce using rule 53 (finalExp -> ID .)
    DIV             reduce using rule 53 (finalExp -> ID .)
    MAYOR           reduce using rule 53 (finalExp -> ID .)
    MENOR           reduce using rule 53 (finalExp -> ID .)
    MAYORIGUAL      reduce using rule 53 (finalExp -> ID .)
    MENORIGUAL      reduce using rule 53 (finalExp -> ID .)
    IGUALIGUAL      reduce using rule 53 (finalExp -> ID .)
    DIFERENTE       reduce using rule 53 (finalExp -> ID .)
    LLAVEIZQ        reduce using rule 53 (finalExp -> ID .)
    PTCOMA          reduce using rule 53 (finalExp -> ID .)
    LLAVEDER        reduce using rule 53 (finalExp -> ID .)
    ID              reduce using rule 53 (finalExp -> ID .)
    FMT             reduce using rule 53 (finalExp -> ID .)
    IF              reduce using rule 53 (finalExp -> ID .)
    GOTO            reduce using rule 53 (finalExp -> ID .)
    RETURN          reduce using rule 53 (finalExp -> ID .)
    CORDER          reduce using rule 53 (finalExp -> ID .)
    PARDER          reduce using rule 53 (finalExp -> ID .)


state 73

    (42) expression -> finalExp . MAS finalExp
    (43) expression -> finalExp . MENOS finalExp
    (44) expression -> finalExp . MUL finalExp
    (45) expression -> finalExp . DIV finalExp
    (46) expression -> finalExp . MAYOR finalExp
    (47) expression -> finalExp . MENOR finalExp
    (48) expression -> finalExp . MAYORIGUAL finalExp
    (49) expression -> finalExp . MENORIGUAL finalExp
    (50) expression -> finalExp . IGUALIGUAL finalExp
    (51) expression -> finalExp . DIFERENTE finalExp
    (52) expression -> finalExp .

    MAS             shift and go to state 89
    MENOS           shift and go to state 90
    MUL             shift and go to state 91
    DIV             shift and go to state 92
    MAYOR           shift and go to state 93
    MENOR           shift and go to state 94
    MAYORIGUAL      shift and go to state 95
    MENORIGUAL      shift and go to state 96
    IGUALIGUAL      shift and go to state 97
    DIFERENTE       shift and go to state 98
    LLAVEIZQ        reduce using rule 52 (expression -> finalExp .)
    PTCOMA          reduce using rule 52 (expression -> finalExp .)
    LLAVEDER        reduce using rule 52 (expression -> finalExp .)
    ID              reduce using rule 52 (expression -> finalExp .)
    FMT             reduce using rule 52 (expression -> finalExp .)
    IF              reduce using rule 52 (expression -> finalExp .)
    GOTO            reduce using rule 52 (expression -> finalExp .)
    RETURN          reduce using rule 52 (expression -> finalExp .)


state 74

    (55) finalExp -> MENOS . ENTERO

    ENTERO          shift and go to state 99


state 75

    (54) finalExp -> ENTERO .

    MAS             reduce using rule 54 (finalExp -> ENTERO .)
    MENOS           reduce using rule 54 (finalExp -> ENTERO .)
    MUL             reduce using rule 54 (finalExp -> ENTERO .)
    DIV             reduce using rule 54 (finalExp -> ENTERO .)
    MAYOR           reduce using rule 54 (finalExp -> ENTERO .)
    MENOR           reduce using rule 54 (finalExp -> ENTERO .)
    MAYORIGUAL      reduce using rule 54 (finalExp -> ENTERO .)
    MENORIGUAL      reduce using rule 54 (finalExp -> ENTERO .)
    IGUALIGUAL      reduce using rule 54 (finalExp -> ENTERO .)
    DIFERENTE       reduce using rule 54 (finalExp -> ENTERO .)
    LLAVEIZQ        reduce using rule 54 (finalExp -> ENTERO .)
    PTCOMA          reduce using rule 54 (finalExp -> ENTERO .)
    LLAVEDER        reduce using rule 54 (finalExp -> ENTERO .)
    ID              reduce using rule 54 (finalExp -> ENTERO .)
    FMT             reduce using rule 54 (finalExp -> ENTERO .)
    IF              reduce using rule 54 (finalExp -> ENTERO .)
    GOTO            reduce using rule 54 (finalExp -> ENTERO .)
    RETURN          reduce using rule 54 (finalExp -> ENTERO .)
    CORDER          reduce using rule 54 (finalExp -> ENTERO .)
    PARDER          reduce using rule 54 (finalExp -> ENTERO .)


state 76

    (56) finalExp -> DECIMAL .

    MAS             reduce using rule 56 (finalExp -> DECIMAL .)
    MENOS           reduce using rule 56 (finalExp -> DECIMAL .)
    MUL             reduce using rule 56 (finalExp -> DECIMAL .)
    DIV             reduce using rule 56 (finalExp -> DECIMAL .)
    MAYOR           reduce using rule 56 (finalExp -> DECIMAL .)
    MENOR           reduce using rule 56 (finalExp -> DECIMAL .)
    MAYORIGUAL      reduce using rule 56 (finalExp -> DECIMAL .)
    MENORIGUAL      reduce using rule 56 (finalExp -> DECIMAL .)
    IGUALIGUAL      reduce using rule 56 (finalExp -> DECIMAL .)
    DIFERENTE       reduce using rule 56 (finalExp -> DECIMAL .)
    LLAVEIZQ        reduce using rule 56 (finalExp -> DECIMAL .)
    PTCOMA          reduce using rule 56 (finalExp -> DECIMAL .)
    LLAVEDER        reduce using rule 56 (finalExp -> DECIMAL .)
    ID              reduce using rule 56 (finalExp -> DECIMAL .)
    FMT             reduce using rule 56 (finalExp -> DECIMAL .)
    IF              reduce using rule 56 (finalExp -> DECIMAL .)
    GOTO            reduce using rule 56 (finalExp -> DECIMAL .)
    RETURN          reduce using rule 56 (finalExp -> DECIMAL .)
    CORDER          reduce using rule 56 (finalExp -> DECIMAL .)
    PARDER          reduce using rule 56 (finalExp -> DECIMAL .)


state 77

    (29) gotoSt -> GOTO ID .

    PTCOMA          reduce using rule 29 (gotoSt -> GOTO ID .)
    LLAVEDER        reduce using rule 29 (gotoSt -> GOTO ID .)
    ID              reduce using rule 29 (gotoSt -> GOTO ID .)
    FMT             reduce using rule 29 (gotoSt -> GOTO ID .)
    IF              reduce using rule 29 (gotoSt -> GOTO ID .)
    GOTO            reduce using rule 29 (gotoSt -> GOTO ID .)
    RETURN          reduce using rule 29 (gotoSt -> GOTO ID .)


state 78

    (31) assign -> access IGUAL finalExp .

    PTCOMA          reduce using rule 31 (assign -> access IGUAL finalExp .)
    LLAVEDER        reduce using rule 31 (assign -> access IGUAL finalExp .)
    ID              reduce using rule 31 (assign -> access IGUAL finalExp .)
    FMT             reduce using rule 31 (assign -> access IGUAL finalExp .)
    IF              reduce using rule 31 (assign -> access IGUAL finalExp .)
    GOTO            reduce using rule 31 (assign -> access IGUAL finalExp .)
    RETURN          reduce using rule 31 (assign -> access IGUAL finalExp .)


state 79

    (57) access -> ID . CORIZQ INT PARIZQ finalExp PARDER CORDER
    (58) access -> ID . CORIZQ finalExp CORDER
    (53) finalExp -> ID .

    CORIZQ          shift and go to state 69
    MAS             reduce using rule 53 (finalExp -> ID .)
    MENOS           reduce using rule 53 (finalExp -> ID .)
    MUL             reduce using rule 53 (finalExp -> ID .)
    DIV             reduce using rule 53 (finalExp -> ID .)
    MAYOR           reduce using rule 53 (finalExp -> ID .)
    MENOR           reduce using rule 53 (finalExp -> ID .)
    MAYORIGUAL      reduce using rule 53 (finalExp -> ID .)
    MENORIGUAL      reduce using rule 53 (finalExp -> ID .)
    IGUALIGUAL      reduce using rule 53 (finalExp -> ID .)
    DIFERENTE       reduce using rule 53 (finalExp -> ID .)
    PTCOMA          reduce using rule 53 (finalExp -> ID .)
    LLAVEDER        reduce using rule 53 (finalExp -> ID .)
    ID              reduce using rule 53 (finalExp -> ID .)
    FMT             reduce using rule 53 (finalExp -> ID .)
    IF              reduce using rule 53 (finalExp -> ID .)
    GOTO            reduce using rule 53 (finalExp -> ID .)
    RETURN          reduce using rule 53 (finalExp -> ID .)


state 80

    (32) assign -> ID IGUAL expression .

    PTCOMA          reduce using rule 32 (assign -> ID IGUAL expression .)
    LLAVEDER        reduce using rule 32 (assign -> ID IGUAL expression .)
    ID              reduce using rule 32 (assign -> ID IGUAL expression .)
    FMT             reduce using rule 32 (assign -> ID IGUAL expression .)
    IF              reduce using rule 32 (assign -> ID IGUAL expression .)
    GOTO            reduce using rule 32 (assign -> ID IGUAL expression .)
    RETURN          reduce using rule 32 (assign -> ID IGUAL expression .)


state 81

    (33) assign -> ID IGUAL modul .

    PTCOMA          reduce using rule 33 (assign -> ID IGUAL modul .)
    LLAVEDER        reduce using rule 33 (assign -> ID IGUAL modul .)
    ID              reduce using rule 33 (assign -> ID IGUAL modul .)
    FMT             reduce using rule 33 (assign -> ID IGUAL modul .)
    IF              reduce using rule 33 (assign -> ID IGUAL modul .)
    GOTO            reduce using rule 33 (assign -> ID IGUAL modul .)
    RETURN          reduce using rule 33 (assign -> ID IGUAL modul .)


state 82

    (34) assign -> ID IGUAL access .

    PTCOMA          reduce using rule 34 (assign -> ID IGUAL access .)
    LLAVEDER        reduce using rule 34 (assign -> ID IGUAL access .)
    ID              reduce using rule 34 (assign -> ID IGUAL access .)
    FMT             reduce using rule 34 (assign -> ID IGUAL access .)
    IF              reduce using rule 34 (assign -> ID IGUAL access .)
    GOTO            reduce using rule 34 (assign -> ID IGUAL access .)
    RETURN          reduce using rule 34 (assign -> ID IGUAL access .)


state 83

    (35) modul -> MATH . PUNTO MOD PARIZQ ENTERO COMMA ENTERO PARDER
    (36) modul -> MATH . PUNTO MOD PARIZQ ID COMMA ID PARDER
    (37) modul -> MATH . PUNTO MOD PARIZQ ID COMMA ENTERO PARDER
    (38) modul -> MATH . PUNTO MOD PARIZQ ENTERO COMMA ID PARDER

    PUNTO           shift and go to state 100


state 84

    (27) callFunc -> ID PARIZQ PARDER .

    PTCOMA          reduce using rule 27 (callFunc -> ID PARIZQ PARDER .)
    LLAVEDER        reduce using rule 27 (callFunc -> ID PARIZQ PARDER .)
    ID              reduce using rule 27 (callFunc -> ID PARIZQ PARDER .)
    FMT             reduce using rule 27 (callFunc -> ID PARIZQ PARDER .)
    IF              reduce using rule 27 (callFunc -> ID PARIZQ PARDER .)
    GOTO            reduce using rule 27 (callFunc -> ID PARIZQ PARDER .)
    RETURN          reduce using rule 27 (callFunc -> ID PARIZQ PARDER .)


state 85

    (57) access -> ID CORIZQ INT . PARIZQ finalExp PARDER CORDER

    PARIZQ          shift and go to state 101


state 86

    (58) access -> ID CORIZQ finalExp . CORDER

    CORDER          shift and go to state 102


state 87

    (39) print -> FMT PUNTO PRINTF . PARIZQ CADENA COMMA printValue PARDER

    PARIZQ          shift and go to state 103


state 88

    (30) if -> IF expression LLAVEIZQ . GOTO ID PTCOMA LLAVEDER

    GOTO            shift and go to state 104


state 89

    (42) expression -> finalExp MAS . finalExp
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    finalExp                       shift and go to state 105

state 90

    (43) expression -> finalExp MENOS . finalExp
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    finalExp                       shift and go to state 106

state 91

    (44) expression -> finalExp MUL . finalExp
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    finalExp                       shift and go to state 107

state 92

    (45) expression -> finalExp DIV . finalExp
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    finalExp                       shift and go to state 108

state 93

    (46) expression -> finalExp MAYOR . finalExp
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    finalExp                       shift and go to state 109

state 94

    (47) expression -> finalExp MENOR . finalExp
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    finalExp                       shift and go to state 110

state 95

    (48) expression -> finalExp MAYORIGUAL . finalExp
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    finalExp                       shift and go to state 111

state 96

    (49) expression -> finalExp MENORIGUAL . finalExp
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    finalExp                       shift and go to state 112

state 97

    (50) expression -> finalExp IGUALIGUAL . finalExp
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    finalExp                       shift and go to state 113

state 98

    (51) expression -> finalExp DIFERENTE . finalExp
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    finalExp                       shift and go to state 114

state 99

    (55) finalExp -> MENOS ENTERO .

    MAS             reduce using rule 55 (finalExp -> MENOS ENTERO .)
    MENOS           reduce using rule 55 (finalExp -> MENOS ENTERO .)
    MUL             reduce using rule 55 (finalExp -> MENOS ENTERO .)
    DIV             reduce using rule 55 (finalExp -> MENOS ENTERO .)
    MAYOR           reduce using rule 55 (finalExp -> MENOS ENTERO .)
    MENOR           reduce using rule 55 (finalExp -> MENOS ENTERO .)
    MAYORIGUAL      reduce using rule 55 (finalExp -> MENOS ENTERO .)
    MENORIGUAL      reduce using rule 55 (finalExp -> MENOS ENTERO .)
    IGUALIGUAL      reduce using rule 55 (finalExp -> MENOS ENTERO .)
    DIFERENTE       reduce using rule 55 (finalExp -> MENOS ENTERO .)
    LLAVEIZQ        reduce using rule 55 (finalExp -> MENOS ENTERO .)
    PTCOMA          reduce using rule 55 (finalExp -> MENOS ENTERO .)
    LLAVEDER        reduce using rule 55 (finalExp -> MENOS ENTERO .)
    ID              reduce using rule 55 (finalExp -> MENOS ENTERO .)
    FMT             reduce using rule 55 (finalExp -> MENOS ENTERO .)
    IF              reduce using rule 55 (finalExp -> MENOS ENTERO .)
    GOTO            reduce using rule 55 (finalExp -> MENOS ENTERO .)
    RETURN          reduce using rule 55 (finalExp -> MENOS ENTERO .)
    CORDER          reduce using rule 55 (finalExp -> MENOS ENTERO .)
    PARDER          reduce using rule 55 (finalExp -> MENOS ENTERO .)


state 100

    (35) modul -> MATH PUNTO . MOD PARIZQ ENTERO COMMA ENTERO PARDER
    (36) modul -> MATH PUNTO . MOD PARIZQ ID COMMA ID PARDER
    (37) modul -> MATH PUNTO . MOD PARIZQ ID COMMA ENTERO PARDER
    (38) modul -> MATH PUNTO . MOD PARIZQ ENTERO COMMA ID PARDER

    MOD             shift and go to state 115


state 101

    (57) access -> ID CORIZQ INT PARIZQ . finalExp PARDER CORDER
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    finalExp                       shift and go to state 116

state 102

    (58) access -> ID CORIZQ finalExp CORDER .

    IGUAL           reduce using rule 58 (access -> ID CORIZQ finalExp CORDER .)
    PTCOMA          reduce using rule 58 (access -> ID CORIZQ finalExp CORDER .)
    LLAVEDER        reduce using rule 58 (access -> ID CORIZQ finalExp CORDER .)
    ID              reduce using rule 58 (access -> ID CORIZQ finalExp CORDER .)
    FMT             reduce using rule 58 (access -> ID CORIZQ finalExp CORDER .)
    IF              reduce using rule 58 (access -> ID CORIZQ finalExp CORDER .)
    GOTO            reduce using rule 58 (access -> ID CORIZQ finalExp CORDER .)
    RETURN          reduce using rule 58 (access -> ID CORIZQ finalExp CORDER .)


state 103

    (39) print -> FMT PUNTO PRINTF PARIZQ . CADENA COMMA printValue PARDER

    CADENA          shift and go to state 117


state 104

    (30) if -> IF expression LLAVEIZQ GOTO . ID PTCOMA LLAVEDER

    ID              shift and go to state 118


state 105

    (42) expression -> finalExp MAS finalExp .

    LLAVEIZQ        reduce using rule 42 (expression -> finalExp MAS finalExp .)
    PTCOMA          reduce using rule 42 (expression -> finalExp MAS finalExp .)
    LLAVEDER        reduce using rule 42 (expression -> finalExp MAS finalExp .)
    ID              reduce using rule 42 (expression -> finalExp MAS finalExp .)
    FMT             reduce using rule 42 (expression -> finalExp MAS finalExp .)
    IF              reduce using rule 42 (expression -> finalExp MAS finalExp .)
    GOTO            reduce using rule 42 (expression -> finalExp MAS finalExp .)
    RETURN          reduce using rule 42 (expression -> finalExp MAS finalExp .)


state 106

    (43) expression -> finalExp MENOS finalExp .

    LLAVEIZQ        reduce using rule 43 (expression -> finalExp MENOS finalExp .)
    PTCOMA          reduce using rule 43 (expression -> finalExp MENOS finalExp .)
    LLAVEDER        reduce using rule 43 (expression -> finalExp MENOS finalExp .)
    ID              reduce using rule 43 (expression -> finalExp MENOS finalExp .)
    FMT             reduce using rule 43 (expression -> finalExp MENOS finalExp .)
    IF              reduce using rule 43 (expression -> finalExp MENOS finalExp .)
    GOTO            reduce using rule 43 (expression -> finalExp MENOS finalExp .)
    RETURN          reduce using rule 43 (expression -> finalExp MENOS finalExp .)


state 107

    (44) expression -> finalExp MUL finalExp .

    LLAVEIZQ        reduce using rule 44 (expression -> finalExp MUL finalExp .)
    PTCOMA          reduce using rule 44 (expression -> finalExp MUL finalExp .)
    LLAVEDER        reduce using rule 44 (expression -> finalExp MUL finalExp .)
    ID              reduce using rule 44 (expression -> finalExp MUL finalExp .)
    FMT             reduce using rule 44 (expression -> finalExp MUL finalExp .)
    IF              reduce using rule 44 (expression -> finalExp MUL finalExp .)
    GOTO            reduce using rule 44 (expression -> finalExp MUL finalExp .)
    RETURN          reduce using rule 44 (expression -> finalExp MUL finalExp .)


state 108

    (45) expression -> finalExp DIV finalExp .

    LLAVEIZQ        reduce using rule 45 (expression -> finalExp DIV finalExp .)
    PTCOMA          reduce using rule 45 (expression -> finalExp DIV finalExp .)
    LLAVEDER        reduce using rule 45 (expression -> finalExp DIV finalExp .)
    ID              reduce using rule 45 (expression -> finalExp DIV finalExp .)
    FMT             reduce using rule 45 (expression -> finalExp DIV finalExp .)
    IF              reduce using rule 45 (expression -> finalExp DIV finalExp .)
    GOTO            reduce using rule 45 (expression -> finalExp DIV finalExp .)
    RETURN          reduce using rule 45 (expression -> finalExp DIV finalExp .)


state 109

    (46) expression -> finalExp MAYOR finalExp .

    LLAVEIZQ        reduce using rule 46 (expression -> finalExp MAYOR finalExp .)
    PTCOMA          reduce using rule 46 (expression -> finalExp MAYOR finalExp .)
    LLAVEDER        reduce using rule 46 (expression -> finalExp MAYOR finalExp .)
    ID              reduce using rule 46 (expression -> finalExp MAYOR finalExp .)
    FMT             reduce using rule 46 (expression -> finalExp MAYOR finalExp .)
    IF              reduce using rule 46 (expression -> finalExp MAYOR finalExp .)
    GOTO            reduce using rule 46 (expression -> finalExp MAYOR finalExp .)
    RETURN          reduce using rule 46 (expression -> finalExp MAYOR finalExp .)


state 110

    (47) expression -> finalExp MENOR finalExp .

    LLAVEIZQ        reduce using rule 47 (expression -> finalExp MENOR finalExp .)
    PTCOMA          reduce using rule 47 (expression -> finalExp MENOR finalExp .)
    LLAVEDER        reduce using rule 47 (expression -> finalExp MENOR finalExp .)
    ID              reduce using rule 47 (expression -> finalExp MENOR finalExp .)
    FMT             reduce using rule 47 (expression -> finalExp MENOR finalExp .)
    IF              reduce using rule 47 (expression -> finalExp MENOR finalExp .)
    GOTO            reduce using rule 47 (expression -> finalExp MENOR finalExp .)
    RETURN          reduce using rule 47 (expression -> finalExp MENOR finalExp .)


state 111

    (48) expression -> finalExp MAYORIGUAL finalExp .

    LLAVEIZQ        reduce using rule 48 (expression -> finalExp MAYORIGUAL finalExp .)
    PTCOMA          reduce using rule 48 (expression -> finalExp MAYORIGUAL finalExp .)
    LLAVEDER        reduce using rule 48 (expression -> finalExp MAYORIGUAL finalExp .)
    ID              reduce using rule 48 (expression -> finalExp MAYORIGUAL finalExp .)
    FMT             reduce using rule 48 (expression -> finalExp MAYORIGUAL finalExp .)
    IF              reduce using rule 48 (expression -> finalExp MAYORIGUAL finalExp .)
    GOTO            reduce using rule 48 (expression -> finalExp MAYORIGUAL finalExp .)
    RETURN          reduce using rule 48 (expression -> finalExp MAYORIGUAL finalExp .)


state 112

    (49) expression -> finalExp MENORIGUAL finalExp .

    LLAVEIZQ        reduce using rule 49 (expression -> finalExp MENORIGUAL finalExp .)
    PTCOMA          reduce using rule 49 (expression -> finalExp MENORIGUAL finalExp .)
    LLAVEDER        reduce using rule 49 (expression -> finalExp MENORIGUAL finalExp .)
    ID              reduce using rule 49 (expression -> finalExp MENORIGUAL finalExp .)
    FMT             reduce using rule 49 (expression -> finalExp MENORIGUAL finalExp .)
    IF              reduce using rule 49 (expression -> finalExp MENORIGUAL finalExp .)
    GOTO            reduce using rule 49 (expression -> finalExp MENORIGUAL finalExp .)
    RETURN          reduce using rule 49 (expression -> finalExp MENORIGUAL finalExp .)


state 113

    (50) expression -> finalExp IGUALIGUAL finalExp .

    LLAVEIZQ        reduce using rule 50 (expression -> finalExp IGUALIGUAL finalExp .)
    PTCOMA          reduce using rule 50 (expression -> finalExp IGUALIGUAL finalExp .)
    LLAVEDER        reduce using rule 50 (expression -> finalExp IGUALIGUAL finalExp .)
    ID              reduce using rule 50 (expression -> finalExp IGUALIGUAL finalExp .)
    FMT             reduce using rule 50 (expression -> finalExp IGUALIGUAL finalExp .)
    IF              reduce using rule 50 (expression -> finalExp IGUALIGUAL finalExp .)
    GOTO            reduce using rule 50 (expression -> finalExp IGUALIGUAL finalExp .)
    RETURN          reduce using rule 50 (expression -> finalExp IGUALIGUAL finalExp .)


state 114

    (51) expression -> finalExp DIFERENTE finalExp .

    LLAVEIZQ        reduce using rule 51 (expression -> finalExp DIFERENTE finalExp .)
    PTCOMA          reduce using rule 51 (expression -> finalExp DIFERENTE finalExp .)
    LLAVEDER        reduce using rule 51 (expression -> finalExp DIFERENTE finalExp .)
    ID              reduce using rule 51 (expression -> finalExp DIFERENTE finalExp .)
    FMT             reduce using rule 51 (expression -> finalExp DIFERENTE finalExp .)
    IF              reduce using rule 51 (expression -> finalExp DIFERENTE finalExp .)
    GOTO            reduce using rule 51 (expression -> finalExp DIFERENTE finalExp .)
    RETURN          reduce using rule 51 (expression -> finalExp DIFERENTE finalExp .)


state 115

    (35) modul -> MATH PUNTO MOD . PARIZQ ENTERO COMMA ENTERO PARDER
    (36) modul -> MATH PUNTO MOD . PARIZQ ID COMMA ID PARDER
    (37) modul -> MATH PUNTO MOD . PARIZQ ID COMMA ENTERO PARDER
    (38) modul -> MATH PUNTO MOD . PARIZQ ENTERO COMMA ID PARDER

    PARIZQ          shift and go to state 119


state 116

    (57) access -> ID CORIZQ INT PARIZQ finalExp . PARDER CORDER

    PARDER          shift and go to state 120


state 117

    (39) print -> FMT PUNTO PRINTF PARIZQ CADENA . COMMA printValue PARDER

    COMMA           shift and go to state 121


state 118

    (30) if -> IF expression LLAVEIZQ GOTO ID . PTCOMA LLAVEDER

    PTCOMA          shift and go to state 122


state 119

    (35) modul -> MATH PUNTO MOD PARIZQ . ENTERO COMMA ENTERO PARDER
    (36) modul -> MATH PUNTO MOD PARIZQ . ID COMMA ID PARDER
    (37) modul -> MATH PUNTO MOD PARIZQ . ID COMMA ENTERO PARDER
    (38) modul -> MATH PUNTO MOD PARIZQ . ENTERO COMMA ID PARDER

    ENTERO          shift and go to state 123
    ID              shift and go to state 124


state 120

    (57) access -> ID CORIZQ INT PARIZQ finalExp PARDER . CORDER

    CORDER          shift and go to state 125


state 121

    (39) print -> FMT PUNTO PRINTF PARIZQ CADENA COMMA . printValue PARDER
    (40) printValue -> . INT PARIZQ finalExp PARDER
    (41) printValue -> . finalExp
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    INT             shift and go to state 127
    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    printValue                     shift and go to state 126
    finalExp                       shift and go to state 128

state 122

    (30) if -> IF expression LLAVEIZQ GOTO ID PTCOMA . LLAVEDER

    LLAVEDER        shift and go to state 129


state 123

    (35) modul -> MATH PUNTO MOD PARIZQ ENTERO . COMMA ENTERO PARDER
    (38) modul -> MATH PUNTO MOD PARIZQ ENTERO . COMMA ID PARDER

    COMMA           shift and go to state 130


state 124

    (36) modul -> MATH PUNTO MOD PARIZQ ID . COMMA ID PARDER
    (37) modul -> MATH PUNTO MOD PARIZQ ID . COMMA ENTERO PARDER

    COMMA           shift and go to state 131


state 125

    (57) access -> ID CORIZQ INT PARIZQ finalExp PARDER CORDER .

    IGUAL           reduce using rule 57 (access -> ID CORIZQ INT PARIZQ finalExp PARDER CORDER .)
    PTCOMA          reduce using rule 57 (access -> ID CORIZQ INT PARIZQ finalExp PARDER CORDER .)
    LLAVEDER        reduce using rule 57 (access -> ID CORIZQ INT PARIZQ finalExp PARDER CORDER .)
    ID              reduce using rule 57 (access -> ID CORIZQ INT PARIZQ finalExp PARDER CORDER .)
    FMT             reduce using rule 57 (access -> ID CORIZQ INT PARIZQ finalExp PARDER CORDER .)
    IF              reduce using rule 57 (access -> ID CORIZQ INT PARIZQ finalExp PARDER CORDER .)
    GOTO            reduce using rule 57 (access -> ID CORIZQ INT PARIZQ finalExp PARDER CORDER .)
    RETURN          reduce using rule 57 (access -> ID CORIZQ INT PARIZQ finalExp PARDER CORDER .)


state 126

    (39) print -> FMT PUNTO PRINTF PARIZQ CADENA COMMA printValue . PARDER

    PARDER          shift and go to state 132


state 127

    (40) printValue -> INT . PARIZQ finalExp PARDER

    PARIZQ          shift and go to state 133


state 128

    (41) printValue -> finalExp .

    PARDER          reduce using rule 41 (printValue -> finalExp .)


state 129

    (30) if -> IF expression LLAVEIZQ GOTO ID PTCOMA LLAVEDER .

    LLAVEDER        reduce using rule 30 (if -> IF expression LLAVEIZQ GOTO ID PTCOMA LLAVEDER .)
    ID              reduce using rule 30 (if -> IF expression LLAVEIZQ GOTO ID PTCOMA LLAVEDER .)
    FMT             reduce using rule 30 (if -> IF expression LLAVEIZQ GOTO ID PTCOMA LLAVEDER .)
    IF              reduce using rule 30 (if -> IF expression LLAVEIZQ GOTO ID PTCOMA LLAVEDER .)
    GOTO            reduce using rule 30 (if -> IF expression LLAVEIZQ GOTO ID PTCOMA LLAVEDER .)
    RETURN          reduce using rule 30 (if -> IF expression LLAVEIZQ GOTO ID PTCOMA LLAVEDER .)


state 130

    (35) modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA . ENTERO PARDER
    (38) modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA . ID PARDER

    ENTERO          shift and go to state 134
    ID              shift and go to state 135


state 131

    (36) modul -> MATH PUNTO MOD PARIZQ ID COMMA . ID PARDER
    (37) modul -> MATH PUNTO MOD PARIZQ ID COMMA . ENTERO PARDER

    ID              shift and go to state 136
    ENTERO          shift and go to state 137


state 132

    (39) print -> FMT PUNTO PRINTF PARIZQ CADENA COMMA printValue PARDER .

    PTCOMA          reduce using rule 39 (print -> FMT PUNTO PRINTF PARIZQ CADENA COMMA printValue PARDER .)
    LLAVEDER        reduce using rule 39 (print -> FMT PUNTO PRINTF PARIZQ CADENA COMMA printValue PARDER .)
    ID              reduce using rule 39 (print -> FMT PUNTO PRINTF PARIZQ CADENA COMMA printValue PARDER .)
    FMT             reduce using rule 39 (print -> FMT PUNTO PRINTF PARIZQ CADENA COMMA printValue PARDER .)
    IF              reduce using rule 39 (print -> FMT PUNTO PRINTF PARIZQ CADENA COMMA printValue PARDER .)
    GOTO            reduce using rule 39 (print -> FMT PUNTO PRINTF PARIZQ CADENA COMMA printValue PARDER .)
    RETURN          reduce using rule 39 (print -> FMT PUNTO PRINTF PARIZQ CADENA COMMA printValue PARDER .)


state 133

    (40) printValue -> INT PARIZQ . finalExp PARDER
    (53) finalExp -> . ID
    (54) finalExp -> . ENTERO
    (55) finalExp -> . MENOS ENTERO
    (56) finalExp -> . DECIMAL

    ID              shift and go to state 72
    ENTERO          shift and go to state 75
    MENOS           shift and go to state 74
    DECIMAL         shift and go to state 76

    finalExp                       shift and go to state 138

state 134

    (35) modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ENTERO . PARDER

    PARDER          shift and go to state 139


state 135

    (38) modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ID . PARDER

    PARDER          shift and go to state 140


state 136

    (36) modul -> MATH PUNTO MOD PARIZQ ID COMMA ID . PARDER

    PARDER          shift and go to state 141


state 137

    (37) modul -> MATH PUNTO MOD PARIZQ ID COMMA ENTERO . PARDER

    PARDER          shift and go to state 142


state 138

    (40) printValue -> INT PARIZQ finalExp . PARDER

    PARDER          shift and go to state 143


state 139

    (35) modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ENTERO PARDER .

    PTCOMA          reduce using rule 35 (modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ENTERO PARDER .)
    LLAVEDER        reduce using rule 35 (modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ENTERO PARDER .)
    ID              reduce using rule 35 (modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ENTERO PARDER .)
    FMT             reduce using rule 35 (modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ENTERO PARDER .)
    IF              reduce using rule 35 (modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ENTERO PARDER .)
    GOTO            reduce using rule 35 (modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ENTERO PARDER .)
    RETURN          reduce using rule 35 (modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ENTERO PARDER .)


state 140

    (38) modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ID PARDER .

    PTCOMA          reduce using rule 38 (modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ID PARDER .)
    LLAVEDER        reduce using rule 38 (modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ID PARDER .)
    ID              reduce using rule 38 (modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ID PARDER .)
    FMT             reduce using rule 38 (modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ID PARDER .)
    IF              reduce using rule 38 (modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ID PARDER .)
    GOTO            reduce using rule 38 (modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ID PARDER .)
    RETURN          reduce using rule 38 (modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ID PARDER .)


state 141

    (36) modul -> MATH PUNTO MOD PARIZQ ID COMMA ID PARDER .

    PTCOMA          reduce using rule 36 (modul -> MATH PUNTO MOD PARIZQ ID COMMA ID PARDER .)
    LLAVEDER        reduce using rule 36 (modul -> MATH PUNTO MOD PARIZQ ID COMMA ID PARDER .)
    ID              reduce using rule 36 (modul -> MATH PUNTO MOD PARIZQ ID COMMA ID PARDER .)
    FMT             reduce using rule 36 (modul -> MATH PUNTO MOD PARIZQ ID COMMA ID PARDER .)
    IF              reduce using rule 36 (modul -> MATH PUNTO MOD PARIZQ ID COMMA ID PARDER .)
    GOTO            reduce using rule 36 (modul -> MATH PUNTO MOD PARIZQ ID COMMA ID PARDER .)
    RETURN          reduce using rule 36 (modul -> MATH PUNTO MOD PARIZQ ID COMMA ID PARDER .)


state 142

    (37) modul -> MATH PUNTO MOD PARIZQ ID COMMA ENTERO PARDER .

    PTCOMA          reduce using rule 37 (modul -> MATH PUNTO MOD PARIZQ ID COMMA ENTERO PARDER .)
    LLAVEDER        reduce using rule 37 (modul -> MATH PUNTO MOD PARIZQ ID COMMA ENTERO PARDER .)
    ID              reduce using rule 37 (modul -> MATH PUNTO MOD PARIZQ ID COMMA ENTERO PARDER .)
    FMT             reduce using rule 37 (modul -> MATH PUNTO MOD PARIZQ ID COMMA ENTERO PARDER .)
    IF              reduce using rule 37 (modul -> MATH PUNTO MOD PARIZQ ID COMMA ENTERO PARDER .)
    GOTO            reduce using rule 37 (modul -> MATH PUNTO MOD PARIZQ ID COMMA ENTERO PARDER .)
    RETURN          reduce using rule 37 (modul -> MATH PUNTO MOD PARIZQ ID COMMA ENTERO PARDER .)


state 143

    (40) printValue -> INT PARIZQ finalExp PARDER .

    PARDER          reduce using rule 40 (printValue -> INT PARIZQ finalExp PARDER .)

