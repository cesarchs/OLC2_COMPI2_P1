
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CADENA COMMA CORDER CORIZQ DECIMAL DIFERENTE DIV DP ENTERO FLOAT64 FMT FUNC GOTO ID IF IGUAL IGUALIGUAL IMPORT INT LLAVEDER LLAVEIZQ MAS MATH MAYOR MAYORIGUAL MENOR MENORIGUAL MENOS MOD MUL PACKAGE PARDER PARIZQ PRINTF PTCOMA PUNTO RETURN VARinicio     :  PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PARDER PTCOMA declarations codeListinicio     :  PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PTCOMA CADENA PARDER PTCOMA declarations codeList declarations : declarations declaration\n                    | declarationdeclaration :     VAR idList CORIZQ ENTERO CORDER FLOAT64 PTCOMA\n                   |     VAR idList type PTCOMAtype : INT\n            | FLOAT64idList :   idList COMMA ID\n                | IDcodeList : codeList code\n                | codecode : FUNC ID PARIZQ PARDER statementstatement : LLAVEIZQ instructions LLAVEDERinstructions : instructions instruction\n                    | instructioninstruction :  assign opcion_ptcoma\n                    | print opcion_ptcoma\n                    | if\n                    | gotoSt opcion_ptcoma\n                    | label\n                    | callFunc opcion_ptcoma\n                    | retSt opcion_ptcoma opcion_ptcoma   :   PTCOMA\n                        |   retSt : RETURNcallFunc : ID PARIZQ PARDERlabel : ID DPgotoSt : GOTO IDif : IF expression LLAVEIZQ GOTO ID PTCOMA LLAVEDERassign : access IGUAL finalExpassign :   ID IGUAL expression\n                | ID IGUAL modul\n                | ID IGUAL access\n    modul       :   MATH PUNTO MOD PARIZQ ENTERO COMMA ENTERO PARDER\n                |   MATH PUNTO MOD PARIZQ ID COMMA ID PARDER\n                |   MATH PUNTO MOD PARIZQ ID COMMA ENTERO PARDER\n                |   MATH PUNTO MOD PARIZQ ENTERO COMMA ID PARDER\n    \n    print : FMT PUNTO PRINTF PARIZQ CADENA COMMA printValue PARDERprintValue :   INT PARIZQ finalExp PARDER\n                  |   finalExpexpression :   finalExp MAS finalExp\n                    | finalExp MENOS finalExp\n                    | finalExp MUL finalExp\n                    | finalExp DIV finalExp\n                    | finalExp MAYOR finalExp\n                    | finalExp MENOR finalExp\n                    | finalExp MAYORIGUAL finalExp\n                    | finalExp MENORIGUAL finalExp\n                    | finalExp IGUALIGUAL finalExp\n                    | finalExp DIFERENTE finalExp\n                    | finalExpfinalExp : ID\n                | ENTERO\n                | MENOS ENTERO\n                | DECIMALaccess :   ID CORIZQ INT PARIZQ finalExp PARDER CORDER\n                | ID CORIZQ finalExp CORDER'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,17,19,24,31,38,57,],[0,-1,-12,-11,-2,-13,-14,]),'ID':([2,15,20,29,39,41,42,43,44,45,46,47,48,49,53,54,55,58,59,60,61,62,63,64,65,66,67,69,72,73,75,76,77,78,79,80,81,82,84,89,90,91,92,93,94,95,96,97,98,99,101,102,104,105,106,107,108,109,110,111,112,113,114,119,121,125,129,130,131,132,133,139,140,141,142,],[3,22,25,35,51,51,-16,-25,-25,-19,-25,-21,-25,-25,72,77,-26,-15,-17,-24,-18,-20,-22,-23,72,79,-28,72,-53,-52,-54,-56,-29,-31,-53,-32,-33,-34,-27,72,72,72,72,72,72,72,72,72,72,-55,72,-58,118,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,124,72,-57,-30,135,136,-39,72,-35,-38,-36,-37,]),'PTCOMA':([3,7,9,12,27,28,30,40,43,44,46,48,49,55,72,73,75,76,77,78,79,80,81,82,84,99,102,105,106,107,108,109,110,111,112,113,114,118,125,132,139,140,141,142,],[4,8,11,16,-8,34,-7,56,60,60,60,60,60,-26,-53,-52,-54,-56,-29,-31,-53,-32,-33,-34,-27,-55,-58,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,122,-57,-39,-35,-38,-36,-37,]),'IMPORT':([4,],[5,]),'PARIZQ':([5,25,51,85,87,115,127,],[6,32,68,101,103,119,133,]),'CADENA':([6,8,103,],[7,10,117,]),'PARDER':([7,10,32,68,72,75,76,99,116,126,128,134,135,136,137,138,143,],[9,12,36,84,-53,-54,-56,-55,120,132,-41,139,140,141,142,143,-40,]),'VAR':([11,13,14,16,18,23,34,56,],[15,15,-4,15,-3,15,-6,-5,]),'FUNC':([13,14,17,18,19,23,24,31,34,38,56,57,],[20,-4,20,-3,-12,20,-11,20,-6,-13,-5,-14,]),'CORIZQ':([21,22,35,51,79,],[26,-10,-9,69,69,]),'COMMA':([21,22,35,117,123,124,],[29,-10,-9,121,130,131,]),'INT':([21,22,35,69,121,],[30,-10,-9,85,127,]),'FLOAT64':([21,22,35,37,],[27,-10,-9,40,]),'ENTERO':([26,53,65,66,69,74,89,90,91,92,93,94,95,96,97,98,101,119,121,130,131,133,],[33,75,75,75,75,99,75,75,75,75,75,75,75,75,75,75,75,123,75,134,137,75,]),'CORDER':([33,72,75,76,86,99,120,],[37,-53,-54,-56,102,-55,125,]),'LLAVEIZQ':([36,71,72,73,75,76,99,105,106,107,108,109,110,111,112,113,114,],[39,88,-53,-52,-54,-56,-55,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,]),'FMT':([39,41,42,43,44,45,46,47,48,49,55,58,59,60,61,62,63,64,67,72,73,75,76,77,78,79,80,81,82,84,99,102,105,106,107,108,109,110,111,112,113,114,125,129,132,139,140,141,142,],[52,52,-16,-25,-25,-19,-25,-21,-25,-25,-26,-15,-17,-24,-18,-20,-22,-23,-28,-53,-52,-54,-56,-29,-31,-53,-32,-33,-34,-27,-55,-58,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-57,-30,-39,-35,-38,-36,-37,]),'IF':([39,41,42,43,44,45,46,47,48,49,55,58,59,60,61,62,63,64,67,72,73,75,76,77,78,79,80,81,82,84,99,102,105,106,107,108,109,110,111,112,113,114,125,129,132,139,140,141,142,],[53,53,-16,-25,-25,-19,-25,-21,-25,-25,-26,-15,-17,-24,-18,-20,-22,-23,-28,-53,-52,-54,-56,-29,-31,-53,-32,-33,-34,-27,-55,-58,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-57,-30,-39,-35,-38,-36,-37,]),'GOTO':([39,41,42,43,44,45,46,47,48,49,55,58,59,60,61,62,63,64,67,72,73,75,76,77,78,79,80,81,82,84,88,99,102,105,106,107,108,109,110,111,112,113,114,125,129,132,139,140,141,142,],[54,54,-16,-25,-25,-19,-25,-21,-25,-25,-26,-15,-17,-24,-18,-20,-22,-23,-28,-53,-52,-54,-56,-29,-31,-53,-32,-33,-34,-27,104,-55,-58,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-57,-30,-39,-35,-38,-36,-37,]),'RETURN':([39,41,42,43,44,45,46,47,48,49,55,58,59,60,61,62,63,64,67,72,73,75,76,77,78,79,80,81,82,84,99,102,105,106,107,108,109,110,111,112,113,114,125,129,132,139,140,141,142,],[55,55,-16,-25,-25,-19,-25,-21,-25,-25,-26,-15,-17,-24,-18,-20,-22,-23,-28,-53,-52,-54,-56,-29,-31,-53,-32,-33,-34,-27,-55,-58,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-57,-30,-39,-35,-38,-36,-37,]),'LLAVEDER':([41,42,43,44,45,46,47,48,49,55,58,59,60,61,62,63,64,67,72,73,75,76,77,78,79,80,81,82,84,99,102,105,106,107,108,109,110,111,112,113,114,122,125,129,132,139,140,141,142,],[57,-16,-25,-25,-19,-25,-21,-25,-25,-26,-15,-17,-24,-18,-20,-22,-23,-28,-53,-52,-54,-56,-29,-31,-53,-32,-33,-34,-27,-55,-58,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,129,-57,-30,-39,-35,-38,-36,-37,]),'IGUAL':([50,51,102,125,],[65,66,-58,-57,]),'DP':([51,],[67,]),'PUNTO':([52,83,],[70,100,]),'MENOS':([53,65,66,69,72,73,75,76,79,89,90,91,92,93,94,95,96,97,98,99,101,121,133,],[74,74,74,74,-53,90,-54,-56,-53,74,74,74,74,74,74,74,74,74,74,-55,74,74,74,]),'DECIMAL':([53,65,66,69,89,90,91,92,93,94,95,96,97,98,101,121,133,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'MATH':([66,],[83,]),'PRINTF':([70,],[87,]),'MAS':([72,73,75,76,79,99,],[-53,89,-54,-56,-53,-55,]),'MUL':([72,73,75,76,79,99,],[-53,91,-54,-56,-53,-55,]),'DIV':([72,73,75,76,79,99,],[-53,92,-54,-56,-53,-55,]),'MAYOR':([72,73,75,76,79,99,],[-53,93,-54,-56,-53,-55,]),'MENOR':([72,73,75,76,79,99,],[-53,94,-54,-56,-53,-55,]),'MAYORIGUAL':([72,73,75,76,79,99,],[-53,95,-54,-56,-53,-55,]),'MENORIGUAL':([72,73,75,76,79,99,],[-53,96,-54,-56,-53,-55,]),'IGUALIGUAL':([72,73,75,76,79,99,],[-53,97,-54,-56,-53,-55,]),'DIFERENTE':([72,73,75,76,79,99,],[-53,98,-54,-56,-53,-55,]),'MOD':([100,],[115,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'inicio':([0,],[1,]),'declarations':([11,16,],[13,23,]),'declaration':([11,13,16,23,],[14,18,14,18,]),'codeList':([13,23,],[17,31,]),'code':([13,17,23,31,],[19,24,19,24,]),'idList':([15,],[21,]),'type':([21,],[28,]),'statement':([36,],[38,]),'instructions':([39,],[41,]),'instruction':([39,41,],[42,58,]),'assign':([39,41,],[43,43,]),'print':([39,41,],[44,44,]),'if':([39,41,],[45,45,]),'gotoSt':([39,41,],[46,46,]),'label':([39,41,],[47,47,]),'callFunc':([39,41,],[48,48,]),'retSt':([39,41,],[49,49,]),'access':([39,41,66,],[50,50,82,]),'opcion_ptcoma':([43,44,46,48,49,],[59,61,62,63,64,]),'expression':([53,66,],[71,80,]),'finalExp':([53,65,66,69,89,90,91,92,93,94,95,96,97,98,101,121,133,],[73,78,73,86,105,106,107,108,109,110,111,112,113,114,116,128,138,]),'modul':([66,],[81,]),'printValue':([121,],[126,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> inicio","S'",1,None,None,None),
  ('inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PARDER PTCOMA declarations codeList','inicio',10,'p_inicio','gramaticaop.py',162),
  ('inicio -> PACKAGE ID PTCOMA IMPORT PARIZQ CADENA PTCOMA CADENA PARDER PTCOMA declarations codeList','inicio',12,'p_iniciod','gramaticaop.py',166),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','gramaticaop.py',170),
  ('declarations -> declaration','declarations',1,'p_declarations','gramaticaop.py',171),
  ('declaration -> VAR idList CORIZQ ENTERO CORDER FLOAT64 PTCOMA','declaration',7,'p_declaration','gramaticaop.py',179),
  ('declaration -> VAR idList type PTCOMA','declaration',4,'p_declaration','gramaticaop.py',180),
  ('type -> INT','type',1,'p_type','gramaticaop.py',187),
  ('type -> FLOAT64','type',1,'p_type','gramaticaop.py',188),
  ('idList -> idList COMMA ID','idList',3,'p_idList','gramaticaop.py',195),
  ('idList -> ID','idList',1,'p_idList','gramaticaop.py',196),
  ('codeList -> codeList code','codeList',2,'p_codeList','gramaticaop.py',203),
  ('codeList -> code','codeList',1,'p_codeList','gramaticaop.py',204),
  ('code -> FUNC ID PARIZQ PARDER statement','code',5,'p_code','gramaticaop.py',212),
  ('statement -> LLAVEIZQ instructions LLAVEDER','statement',3,'p_statement','gramaticaop.py',216),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','gramaticaop.py',220),
  ('instructions -> instruction','instructions',1,'p_instructions','gramaticaop.py',221),
  ('instruction -> assign opcion_ptcoma','instruction',2,'p_instruction','gramaticaop.py',229),
  ('instruction -> print opcion_ptcoma','instruction',2,'p_instruction','gramaticaop.py',230),
  ('instruction -> if','instruction',1,'p_instruction','gramaticaop.py',231),
  ('instruction -> gotoSt opcion_ptcoma','instruction',2,'p_instruction','gramaticaop.py',232),
  ('instruction -> label','instruction',1,'p_instruction','gramaticaop.py',233),
  ('instruction -> callFunc opcion_ptcoma','instruction',2,'p_instruction','gramaticaop.py',234),
  ('instruction -> retSt opcion_ptcoma','instruction',2,'p_instruction','gramaticaop.py',235),
  ('opcion_ptcoma -> PTCOMA','opcion_ptcoma',1,'p_opcion_ptcoma','gramaticaop.py',240),
  ('opcion_ptcoma -> <empty>','opcion_ptcoma',0,'p_opcion_ptcoma','gramaticaop.py',241),
  ('retSt -> RETURN','retSt',1,'p_return','gramaticaop.py',245),
  ('callFunc -> ID PARIZQ PARDER','callFunc',3,'p_callFunc','gramaticaop.py',249),
  ('label -> ID DP','label',2,'p_label','gramaticaop.py',253),
  ('gotoSt -> GOTO ID','gotoSt',2,'p_goto','gramaticaop.py',257),
  ('if -> IF expression LLAVEIZQ GOTO ID PTCOMA LLAVEDER','if',7,'p_if','gramaticaop.py',261),
  ('assign -> access IGUAL finalExp','assign',3,'p_assign','gramaticaop.py',265),
  ('assign -> ID IGUAL expression','assign',3,'p_assign2','gramaticaop.py',269),
  ('assign -> ID IGUAL modul','assign',3,'p_assign2','gramaticaop.py',270),
  ('assign -> ID IGUAL access','assign',3,'p_assign2','gramaticaop.py',271),
  ('modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ENTERO PARDER','modul',8,'p_mod','gramaticaop.py',277),
  ('modul -> MATH PUNTO MOD PARIZQ ID COMMA ID PARDER','modul',8,'p_mod','gramaticaop.py',278),
  ('modul -> MATH PUNTO MOD PARIZQ ID COMMA ENTERO PARDER','modul',8,'p_mod','gramaticaop.py',279),
  ('modul -> MATH PUNTO MOD PARIZQ ENTERO COMMA ID PARDER','modul',8,'p_mod','gramaticaop.py',280),
  ('print -> FMT PUNTO PRINTF PARIZQ CADENA COMMA printValue PARDER','print',8,'p_print','gramaticaop.py',286),
  ('printValue -> INT PARIZQ finalExp PARDER','printValue',4,'p_printValue','gramaticaop.py',290),
  ('printValue -> finalExp','printValue',1,'p_printValue','gramaticaop.py',291),
  ('expression -> finalExp MAS finalExp','expression',3,'p_expression','gramaticaop.py',299),
  ('expression -> finalExp MENOS finalExp','expression',3,'p_expression','gramaticaop.py',300),
  ('expression -> finalExp MUL finalExp','expression',3,'p_expression','gramaticaop.py',301),
  ('expression -> finalExp DIV finalExp','expression',3,'p_expression','gramaticaop.py',302),
  ('expression -> finalExp MAYOR finalExp','expression',3,'p_expression','gramaticaop.py',303),
  ('expression -> finalExp MENOR finalExp','expression',3,'p_expression','gramaticaop.py',304),
  ('expression -> finalExp MAYORIGUAL finalExp','expression',3,'p_expression','gramaticaop.py',305),
  ('expression -> finalExp MENORIGUAL finalExp','expression',3,'p_expression','gramaticaop.py',306),
  ('expression -> finalExp IGUALIGUAL finalExp','expression',3,'p_expression','gramaticaop.py',307),
  ('expression -> finalExp DIFERENTE finalExp','expression',3,'p_expression','gramaticaop.py',308),
  ('expression -> finalExp','expression',1,'p_expression','gramaticaop.py',309),
  ('finalExp -> ID','finalExp',1,'p_finalExp','gramaticaop.py',316),
  ('finalExp -> ENTERO','finalExp',1,'p_finalExp','gramaticaop.py',317),
  ('finalExp -> MENOS ENTERO','finalExp',2,'p_finalExp','gramaticaop.py',318),
  ('finalExp -> DECIMAL','finalExp',1,'p_finalExp','gramaticaop.py',319),
  ('access -> ID CORIZQ INT PARIZQ finalExp PARDER CORDER','access',7,'p_access','gramaticaop.py',326),
  ('access -> ID CORIZQ finalExp CORDER','access',4,'p_access','gramaticaop.py',327),
]
