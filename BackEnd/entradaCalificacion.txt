#=

1)arrays aun no C3D EN GOOLANG en aritmeticas,prints etc dentro de func estan "quemadas" :( 
   y guardar paso a funciones como param error al pasar como param un array a funcion se queda
   para siempre, no cambia con el cambio de parametro

   1.1)declaracion array y llamada de arrays debe ser mas generico!
   1.2)arr[j+1]     daclavos porq retorna un Ts y eso lo uso como indice y F :'(


2)funciones con recursividad par impar necesito poner ambas sino F

3)no aguanto ackerman

4)faltan structs, aun no existen :/

5)array[n][?][?][n] el bounds_error no parece en ?,? intermedios.

6)comas dentro de funciones F no sirven en prints.

7)faltan parse y string como funciones nativas

8)for - array de string f TuT


=#





############################################################################################
############################################################################################
                                        BASICO
############################################################################################
############################################################################################


val1 = 1::Int64;
val2 = 10::Int64;
val3 = 2021.2020::Float64;

println("Probando declaracion de variables");
println(val1, " ", val2, " ", val3);
println("---------------------------------");
# COMENTARIO DE UNA LINEA
val1 = val1 + 41 - 123 * 4 / (2 + 2 * 2) - (10 + (125 % 5)) * 2 ^ 2;
val2 = 11 * (11 % (12 + -10)) + 22 / 2;
val3 = 2 ^ 6   #(2 * 12 / 6) + 25 / 5    
#= COMENTARIO
MULTILINEA =#;
println("Probando asignación de variables y aritmeticas");
println(val1, " ", val2, " ", val3);
println("---------------------------------");

rel1 = (((val1 - val2) == 24) && (true && (false || 5 >= 5))) || ((7*7) != (15+555) || -61 > 51);
rel2 = (7*7) <= (15+555) && 1 < 2;
rel3 = ((0 == 0) != ((532 > 532)) == ("Hola" == "Hola")) && (false || (false == true));
println("Probando relacionales y logicas");
println(rel1, " ", rel2, " ", rel3);
println("---------------------------------");

println("OPERACIONES " * "CON " * "Cadenas"^3);
despedida = "Adios mundo :c";
println(uppercase("Hola Mundo! ") * lowercase(despedida));

println("Probando funciones nativas de JOLC");




println(trunc(Int64,35.156105));
println(float(11));
carnet = "201807394";
println("Hola " * carnet);
println("---------------------------------");






############################################################################################
############################################################################################
                                        INTERMEDIO
############################################################################################
############################################################################################






array = [32, 21, 7, 89, 56, 909, 109, 2];

println("=======================================================================");
println("==================================IF===================================");
println("=======================================================================");

if (array[4] > 50) 
    println("IF CORRECTO");
elseif (array[4] == 56) 
    println("IF INCORRECTO");
else
    println("IF INCORRECTO");
end;

println("");
println("=======================================================================");
println("=============================IFs ANIDADOS==============================");
println("=======================================================================");
aux = 10;
if aux > 0
    println("PRIMER IF CORRECTO");
    if true && (aux == 1)
        println("SEGUNDO IF INCORRECTO");
    elseif aux > 10
        println("SEGUNDO IF INCORRECTO");
    else
        println("SEGUNDO IF CORRECTO");
    end;
elseif aux <= 3
    println("PRIMER IF INCORRECTO");
    if true && (aux == 1)
        println("SEGUNDO IF INCORRECTO");
    elseif aux > 10
        println("SEGUNDO IF INCORRECTO");
    else
        println("SEGUNDO IF CORRECTO");
    end;
elseif aux == array[4]
    println("PRIMER IF INCORRECTO");
    if true && (aux == 1)
        println("SEGUNDO IF INCORRECTO");
    elseif aux > 10
        println("SEGUNDO IF INCORRECTO");
    else
        println("SEGUNDO IF CORRECTO");
    end;
end;

println("");
println("=======================================================================");
println("=================================WHILE=================================");
println("=======================================================================");

index = 0::Int64;

while (index >= 0) 

    if (index == 0) 
        global index = index + 100;
    elseif (index > 50) 
        global index = index / 2 - 25;
    else 
        global index = (index / 2) - 1;
    end;

    println(index);
end;

println("");
println("=======================================================================");
println("================================WHILE-2================================");
println("=======================================================================");

index = -2;
index = index + 1;

while (index != 12)
    global index = index + 1;
    if (index == 0 || index == 1 || index == 11 || index == 12) 
        println("*********************************************************************************************************");
    elseif (index == 2) 
        println("**********  ***************  ******                 ******                 ******              **********");
    elseif (index >= 3 && index <= 5) 
        println("**********  ***************  ******  *********************  *************  ******  **********************");
    elseif (index == 6) 
        println("**********  ***************  ******                 ******                 ******  **********************");
    elseif (index >= 7 && index <= 9) 
        println("**********  ***************  ********************   ******  *************  ******  **********************");
    elseif (index == 10) 
        println("**********                   ******                 ******  *************  ******              **********");
    end;
end;

println("");
println("=======================================================================");
println("=============================TRANSFERENCIA=============================");
println("=======================================================================");

a = -1;
while (a < 5)
    global a = a + 1;
    if a == 3
        print("a");
        continue;
    elseif a == 4
        println("b");
        break;
    end;

    print("El valor de a es: ", a, ", ");
end;

println("Se debió imprimir");

println("");
println("=======================================================================");
println("==================================FOR==================================");
println("=======================================================================");

for i in 0:9

    output = "";
    for j in 0:(10 - i)
        output = output * " ";
    end;

    for k in 0:i 
        output = output * "* ";
    end;
    println(output);

end;


println("");
println("=======================================================================");
println("=================================FOR-4=================================");
println("=======================================================================");
for letra in "Calificacion de Intermedio"
    println(letra);
end;


 for k in 0:5 
        print(k);
    end;







############################################################################################
############################################################################################
                                        FUNCIONES BASICAS
############################################################################################
############################################################################################


println("=======================================================================");
println("==========================FUNCIONES Y RETURN===========================");
println("=======================================================================");
function potenciaNativa(base::Int64, exponente::Int64)::Int64
    resultado = base;
    while exponente > 1
        resultado = resultado * base;
        exponente = exponente - 1;
    end;
    return resultado;
end;

println(potenciaNativa(5, 7));
println(potenciaNativa(2, 2));
println(potenciaNativa(4, 2));

function sumarTodo(num1::Int64, num2::Int64)::Int64
    result = 0;
    if num1 < 0 || num2 < 0
        return -1;
    end;

    while num1 > 0 || num2 > 0
        result = result + (num1 + num2);
        num1 = num1 - 1;
        num2 = num2 - 1;
    end;
    return result;
end;

println(sumarTodo(5, 4));
println(sumarTodo(-1, -5));
println(sumarTodo(7, 7));


#da 24 no 25 xd

############################################################################################
############################################################################################
                                        FUNCIONES RECURSIVAS F
############################################################################################
############################################################################################


function ackerman(m::Int64, n::Int64)::Int64    #aun no sirve :/
    if m == 0
        return n + 1;
    elseif m > 0 && n == 0
        return ackerman(m - 1, 1);
    else
        return ackerman(m - 1, ackerman(m, n - 1));
    end;
end;

function hanoi(discos::Int64, origen::Int64, auxiliar::Int64, destino::Int64)
    if discos == 1
        println("Mover de ", origen, " a ", destino);
    else
        hanoi(discos - 1, origen, destino, auxiliar);
        println("Mover de ", origen, " a ", destino);
        hanoi(discos - 1, auxiliar, origen, destino);
    end;
end;

function factorial(num::Int64)::Int64
    if num == 1
        return 1;
    else
        return num * factorial(num - 1);
    end;
end;

println(factorial(5));
#println(ackerman(3, 5));
hanoi(3, 1, 2, 3);



############################################################################################
############################################################################################
                                        ARRAYS 1 DIMENSION F
############################################################################################
############################################################################################

function swap(i::Int64, j::Int64, arr::Vector) 
    temp = arr[i]::Int64;
    arr[i] = arr[j];
    arr[j] = temp;
end;

function bubbleSort(arr::Vector)
    for i in 0:(length(arr) - 1)
        for j in 1:(length(arr) - 1)
            if(arr[j] > arr[j + 1])
                swap(j, j+1, arr);
            end;
        end;
    end;
end;

function insertionSort(arr::Vector) 

    for i in 2:length(arr)
        j = i;
        temp = arr[i];#aqui se caga :/
        while(j > 1 && arr[j - 1] > temp)
            arr[j] = arr[j-1];
            j = j - 1;
        end;
        arr[j] = temp;
    end;

end;

arreglo = [32,7*3,7,89,56,909,109,2,9,9874^0,44,3,820*10,11,8*0+8,10];
println(length(arreglo));
bubbleSort(arreglo);
println("BubbleSort => ",arreglo);

arreglo = [32,7*3,7,89,56,909,109,2,9,9874^1,44,3,820*10,11,8*0+8,10];
arreglo[1] = arreglo[2]^0;
#insertionSort(arreglo);
print("InsertionSort => ",arreglo);





############################################################################################
############################################################################################
                                        ARRAYS 2 DIMENSION F
############################################################################################
############################################################################################







random = [1, 5, 8, -1, 21, 42, -55, 123, -5, 5, 11];

a = [
    [
        random[1] * 3,
        51,
        random[4] / 2,
        (random[3] * 10) % 7
    ], 
    [
        1,
        2,
        3,
        4
    ]
];

b = [
    [
        1,
        2,
        3,
        4   
    ], 
    [
        random[1] * 3,
        51,
        random[4] / 2,
        (random[3] * 10) % 7
    ]
];

auxiliar = [
    [
        0.0,
        0.0,
        0.0,
        0.0
    ], 
    [
        0.0,
        0.0,
        0.0,
        0.0
    ]
];


# Si no tienen implementado este for, pueden cambiarlo por algún otro ciclo que funcione parecido.
function printMatriz(matrix::Vector)
    println("[");
    for i in length(matrix)
        print("[");
        for j in i
            print(j, " ");
        end;
        println("]");
    end;
    println("]");
end;

function sumarMatrices(matrix1::Vector, matrix2::Vector)
    global auxiliar;
    if length(matrix1) != length(matrix2)
        return "NO SE PUEDEN SUMAR. NO SON DE LA MISMA LONGITUD";
    end;

    
    for i in 1:length(matrix1)
        for j in 1:length(matrix1[1])
            auxiliar[i][j] = matrix1[i][j] + matrix2[i][j];
        end;
    end;
    return auxiliar;
end;

function compararMatrices(matrix1::Vector, matrix2::Vector)::Bool
    if length(matrix1) != length(matrix2)
        return false;
    end;

    
    for i in 1:length(matrix1)
        for j in 1:length(matrix1[1])
            if matrix1[i][j] != matrix2[i][j]
                return false;
            end;
        end;
    end;
    return true;
end;

println("MATRIZ a");
printMatriz(a);
println();
println("MATRIZ b");
printMatriz(b);

println();
println("LAS DOS MATRICES SUMADAS");
println(sumarMatrices(a, b));

println();
println("COMPARAR MATRICES. SON IGUALES?");
println(compararMatrices(a, b));

println();
println("Pop Matriz a");


println();
println("Push a b");

printMatriz(b);

b = a;
println();
println("COMPARAR MATRICES. SON IGUALES?");
println(compararMatrices(a, b));